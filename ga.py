import random
from itertools import count, islice
import numpy as np


def ga(population_size,
       fitness,
       generate,
       mutate,
       crossover,
       clone,
       mutation_fraction=0.05,
       crossover_fraction=1.0,
       kill_fraction=0.5,
       kill_std_dev=0.1,
       callbacks=None,
       pool=None,
       max_generation=-1):
    """
    :param population_size: The size of the population.
    :param fitness: A function that takes a member and computes its fitness.
    :param generate: A function that takes nothing and generates a random member.
    :param mutate: A function that takes a member and returns it in a mutated form.
    :param crossover: A function that takes two members and returns a new combined member.
    :param clone: A function that deep clones a member.
    :param mutation_fraction: The fraction of the population that survives a generation that undergoes a mutation.
    :param crossover_fraction: The fraction of the killed population that is regenerated by crossover.
                               The remainder is regenerated by mutating clones of survivors.
    :param kill_fraction: The fraction of the population that is killed after each generation.
    :param kill_std_dev: The standard deviation causing some members above (below) the fill_fraction to survive (die).
    :param callbacks: A list of functions that each takes the generation index, the generation and their fitnesses.
    :param max_generation: The number of generations to simulate. -1 means indefinite.
    :param pool: An optional function taking a list of members removed from the population such that they can be reused
    :return: The last generation.
    """

    assert max_generation >= 1 or max_generation == -1
    callbacks = callbacks or []
    if not mutate:
        mutation_fraction = 0
    if not crossover:
        crossover_fraction = 0

    population = [generate() for _ in range(population_size)]
    print('population generated')

    for generation_index in (range(max_generation) if max_generation != -1 else count(0, 1)):
        if generation_index % 100 == 0:
            print('gen', generation_index)
        fitnesses = _compute_fitness(population, fitness)

        population, fitnesses = zip(*sorted(zip(population, fitnesses), key=lambda t: t[1]))

        for callback in callbacks:
            callback(generation_index, population, fitnesses)

        survivors = _kill(population, kill_fraction, kill_std_dev, pool)
        children = _crossover(population_size, survivors, crossover_fraction, crossover)
        clones = _regenerate(survivors, population_size - len(children) - len(survivors), mutate, clone)
        _mutate(survivors, mutation_fraction, mutate)

        population = survivors + children + clones
        assert len(population) == len(fitnesses)


def _compute_fitness(population, fitness):
    return [fitness(member) for member in population]  # TODO: parallelize


def _kill(population, kill_fraction, std_dev, pool):
    kill_median = int(round(kill_fraction * len(population)))
    assert kill_median != len(population)
    scaled_std_dev = int(round(std_dev * len(population)))

    # get the indices of members that above (below) the threshold are (aren't) killed where they usually would (not) be
    exception_indices = normalintsample(0, len(population), len(population) - kill_median, scaled_std_dev, kill_median)
    survivors = [population[i] for i in sorted(set(range(0, kill_median)) ^ exception_indices)]

    if pool:
        pool((population[i] for i in set(range(kill_median, len(population))) ^ exception_indices))
    return survivors


def _mutate(population, mutation_fraction, mutate):
    if mutation_fraction == 0:
        return
    for member_index in range(1, len(population)):  # best one cannot mutate
        member = population[member_index]
        if member is not None:
            if random.uniform(0, 1) < mutation_fraction:
                population[member_index] = mutate(member)


def _crossover(population_size, survivors, fraction, crossover):
    if fraction == 0:
        return

    n = int(round(fraction * (population_size - len(survivors))))
    return [crossover(*random.sample(survivors, 2)) for _ in range(n)]


def _regenerate(survivors, n, mutate, clone):
    if n > len(survivors):
        models = list(survivors)
        while len(models) != n:
            new = survivors[:max(0, min(n - len(models), len(survivors)))]
            models += new
    else:
        PREFIXED = n // 2
        models = survivors[:PREFIXED] + random.sample(survivors, n - PREFIXED)

    assert len(models) == n
    clones = [clone(model) for model in models]
    for clone in clones:
        mutate(clone)
    return clones


def _merge(gapped, fillings):
    """
    Fills the specified fillings at the positions in the gapped list where there is currently a None
    """
    i = 0
    for new in fillings:
        while gapped[i]:
            i += 1
            if len(gapped) == i:
                return
        gapped[i] = new
        i += 1
        if len(gapped) == i:
            return


def normalintsample(low, high, mean, std_dev, n):
    """
    Draws n unique number in [low, high) according to a normal distribution with parameters mean and std_dev
    """
    assert 0 <= n < high - low

    indices = set()
    while len(indices) != n:
        sample = int(round(random.gauss(mean, std_dev)))
        if low <= sample < high:
            indices.add(sample + low)
    return indices


def array_crossover(a, b):
    if isinstance(a, list):
        assert len(a) == len(b)
        result = []
        for index in range(len(a)):
            if random.randint(0, 1) == 0:
                result.append(a[index])
            else:
                result.append(b[index])
        return result
    else:
        assert a.shape == b.shape
        result = np.zeros(a.shape, a.dtype)
        for index in np.unravel_index(range(a.size), a.shape):
            if random.randint(0, 1) == 0:
                result[index] = a[index]
            else:
                result[index] = b[index]
        return result
